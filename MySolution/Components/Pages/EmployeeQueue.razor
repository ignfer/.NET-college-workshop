@using System.Timers
@using MySolution.Repositories
@using MySolution.Services;
@inject QueueService QueueService
@inject AppointmentService AppointmentService
@inject DeskRepository DeskRepository
@implements IDisposable
@rendermode InteractiveServer

@page "/employee-queue"

@code {
	List<String> WaitingClients = new List<String>();
	List<String> OngoingClients = new List<String>();
	private Timer? timer;
	double averageWaitingTime = 0;
	bool wantToSelect = true;
	IEnumerable<Desk> desks;
	string selectedDeskName = "Puesto 1";

	protected override void OnInitialized()
	{
		desks = DeskRepository.GetAll();
		timer = new Timer(200);
		timer.Elapsed += UpdateQueue;
		timer.AutoReset = true;
		timer.Enabled = true;
	}

	private void UpdateQueue(object? sender, ElapsedEventArgs e)
	{
		try
		{
			InvokeAsync(() =>
			{
				var queue = QueueService.GetQueue();
				var appointments = AppointmentService.GetAppointments();

				WaitingClients = queue
					.Where(item => item.Status == "Waiting")
					.Select(item => $"{item.Id} - {item.CINumber}")
					.ToList();

				OngoingClients = appointments
					.Select(item => $"{item.Id} - {item.Queue.CINumber}")
					.ToList();


				averageWaitingTime = AppointmentService.GetAverageWaitingTime();

				StateHasChanged();
			});
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error in UpdateQueue: {ex.Message}");
		}
	}

	public void Dispose()
	{
		if (timer != null)
		{
			timer.Stop();
			timer.Dispose();
		}
	}
	
	public void CallNextClient()
	{
		var apointments = AppointmentService.GetAppointments();
		if (apointments.Count() == 0)
		{
			AppointmentService.GetNextInQueue(selectedDeskName);
		}
		else
		{
			var lastAppointment = AppointmentService.GetLastCalledAppointment();
			AppointmentService.EndAppointment(lastAppointment.Id, selectedDeskName);
		}
		StateHasChanged();
	}

	/*
	 <select @bind="selectedDeskName" class="form-select">
	   	<option value="" disabled selected>-- Seleccione un puesto --</option>
	   	@foreach (var desk in desks)
	   	{
	   		<option value="@desk.Name">@desk.Name</option>
	   	}
	   </select>
	 */
}

<PageTitle>Employee Queue</PageTitle>

<RadzenCard class="p-4 rz-color-on-info rz-text-align-center w-100">
	<RadzenStack Orientation="@Orientation.Vertical" Gap="16px" JustifyContent="@JustifyContent.Center" AlignItems="@AlignItems.Center">
		
		<div class="d-flex flex-row justify-content-center align-items-center gap-2">
			<RadzenText class="fw-bold fs-2">
				Puesto de atención
			</RadzenText>
		</div>
		
		<RadzenCard 
			@onclick="@CallNextClient"
			class="bg-primary w-100 d-flex flex-row justify-content-center align-items-center gap-2 shadow-lg">
			<RadzenText class="fw-bold fs-2 text-white user-select-none">
				Llamar proximo cliente
			</RadzenText>
		</RadzenCard>
		
		<div class="w-100 d-flex gap-2">
			<div class="w-25 rounded-2 d-flex flex-column gap-2">
				<StatCard Subtitle="Espera promedio" Title="@($"{averageWaitingTime.ToString("F0")} minutos")" />
				<StatCard Subtitle="Clientes en espera" Title="@WaitingClients.Count().ToString()" />
			</div>

			<div class="w-75 p-2 border border-1 border-primary rounded-2 d-flex flex-column align-items-start gap-2 shadow-sm">
				<RadzenText class="fw-bold fs-1">
					A continuación
				</RadzenText>
				<div class="d-flex gap-1 flex-wrap">
					@foreach (var client in WaitingClients)
					{
						<NextInLine Content="@($"{client}")" />
					}
				</div>
			</div>
		</div>
	</RadzenStack>
</RadzenCard>
