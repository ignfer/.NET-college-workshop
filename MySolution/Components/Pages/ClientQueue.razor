@using System.Timers
@using Microsoft.EntityFrameworkCore
@using MySolution.Data
@using MySolution.Models;
@using MySolution.Services;
@inject QueueService QueueService
@inject AppointmentService AppointmentService
@implements IDisposable
@rendermode InteractiveServer

@page "/client-queue"

@code {
	List<String> WaitingClients = new List<String>();
	List<String> OngoingClients = new List<String>();
	private Timer? timer;
	double averageWaitingTime = 0;

	protected override void OnInitialized()
	{
		timer = new Timer(1000);
		timer.Elapsed += UpdateQueue;
		timer.AutoReset = true;
		timer.Enabled = true;
	}

	private void UpdateQueue(object? sender, ElapsedEventArgs e)
	{
		try 
		{
			InvokeAsync(() => 
			{
				var queue = QueueService.GetQueue();
				var appointments = AppointmentService.GetAppointments();
				WaitingClients.Clear();
				OngoingClients.Clear();

				foreach (var item in queue)
				{
					if (item.Status == "Waiting")
					{
						WaitingClients.Add($"{item.Id} - {item.CINumber}");
					}

				}

				foreach (var item in appointments)
				{
					Console.WriteLine($"Id: {item.Id}, CI: {item.Queue.CINumber}, Start Date: {item.StartDate}, End Date: {item.EndDate}");
					OngoingClients.Add($"{item.Id} - {item.Queue.CINumber}");
				}

				averageWaitingTime = AppointmentService.GetAverageWaitingTime();

				StateHasChanged();
			});
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error in UpdateQueue: {ex.Message}");
		}
	}

	public void Dispose()
	{
		if (timer != null)
		{
			timer.Stop();
			timer.Dispose();
		}
	}
}


<PageTitle>Client Queue</PageTitle>

<RadzenCard class="p-4 rz-color-on-info rz-text-align-center w-100">
	<RadzenStack Orientation="@Orientation.Vertical" Gap="16px" JustifyContent="@JustifyContent.Center" AlignItems="@AlignItems.Center">
	
		<div class="d-flex flex-row justify-content-center align-items-center gap-2">
			<RadzenText class="fw-bold fs-2">
				Visualización de turnos
			</RadzenText>
		</div>

		<RadzenCard class="bg-primary w-100 d-flex flex-row justify-content-center align-items-center gap-2 shadow-lg">
			<RadzenText class="fw-bold fs-2 text-white">
				Ticket
				<img width="48" src="./ico-ticket-white.svg">
			</RadzenText>
			<RadzenText class="fw-bold fs-1 text-white">
				125
			</RadzenText>
			<RadzenText class="fw-bold fs-2 text-white d-flex justify-content-center align-items-center">
				por favor dirigirse al puesto
				<img width="48" src="./ico-briefcase-white.svg">
			</RadzenText>
			<RadzenText class="fw-bold fs-1 text-white">
				4
			</RadzenText>
		</RadzenCard>

		<div class="p-2 border border-1 border-primary w-100 rounded-2 d-flex flex-column align-items-start gap-2 shadow-sm">
			<RadzenText class="fw-bold fs-1">
				A continuación
			</RadzenText>
			<div class="d-flex gap-1 flex-wrap">
				@foreach (var client in WaitingClients)
				{
					<NextInLine Content="@($"{client}")" />
				}
			</div>
		</div>
		<div class="p-2 border border-1 border-primary w-100 rounded-2 d-flex flex-row gap-2">
			<div class="w-25 rounded-2 d-flex flex-column gap-2">
				<StatCard Subtitle="Espera promedio" Title="@($"{averageWaitingTime.ToString("F0")} minutos")" />
				<StatCard Subtitle="Clientes en espera" Title="@WaitingClients.Count().ToString()"/>
			</div>
			<div class="p-2 border border-1 border-primary w-75 rounded-2 d-flex flex-row flex-wrap gap-2 justify-content-start align-items-start">
				@foreach (var client in OngoingClients)
				{
					<TicketCard Ticket="@client" Puesto="@client" />
				}
			</div>
		</div>
	</RadzenStack>
</RadzenCard>
