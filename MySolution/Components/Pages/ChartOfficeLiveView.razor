@using System.Timers
@using Services
@inject QueueService QueueService
@implements IDisposable
@rendermode InteractiveServer

@code {
	private int WaitingClients = 0;
	private Timer? timer;

	class DataItem
	{
		public string Office { get; set; }
		public double People { get; set; }
	}

	DataItem[] waiting = Array.Empty<DataItem>();

	protected override void OnInitialized()
	{
		timer = new Timer(200);
		timer.Elapsed += UpdateQueue;
		timer.AutoReset = true;
		timer.Enabled = true;
	}

	private void UpdateQueue(object? sender, ElapsedEventArgs e)
	{
		try
		{
			InvokeAsync(() =>
			{
				var queue = QueueService.GetQueue();
				WaitingClients = 0;

				foreach (var item in queue)
				{
					if (item.Status == "Waiting")
					{
						WaitingClients++;
					}

				}

				var offices = new[] { "Oficina 1"};

				waiting = offices.Select(o => new DataItem {
						Office = o,
						People = WaitingClients
					})
					.ToArray();

				StateHasChanged();
			});
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error in UpdateQueue: {ex.Message}");
		}
	}

	public void Dispose()
	{
		if (timer != null)
		{
			timer.Stop();
			timer.Dispose();
		}
	}
}

<div class="
			p-2 
			border 
			border-1 
			border-primary 
			rounded-2 
			shadow-sm
			d-flex 
			flex-col
			flex-wrap
			w-100 
			justify-content-center 
			align-items-center"
>
	<RadzenChart class="w-100">
		<RadzenColumnSeries Fill="#b02715" Data="@waiting" CategoryProperty="Office" Title="Esperando" LineType="LineType.Dashed" ValueProperty="People">
			<RadzenSeriesDataLabels/>
		</RadzenColumnSeries>
		<RadzenColumnOptions Radius="5" />
		<RadzenValueAxis>
			<RadzenGridLines Visible="true" />
		</RadzenValueAxis>
	</RadzenChart>
</div>